@page "/fruits/details/{Id:int}"
@using DataAccess.Models
@inject IFruitsService FruitService
@inject NavigationManager Navigation

<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-center mb-4 text-success fw-bold" style="color: #3F6C45">Fruit Details</h2>
        <button class="btn btn-secondary mb-3" @onclick="@(() => Navigation.NavigateTo("/fruits"))">
            <i class="bi bi-arrow-left-circle"></i> Back to List
        </button>
    </div>

    @if (fruit == null)
    {
        <div class="alert alert-warning">Fruit not found.</div>
    }
    else
    {
        <div class="card shadow-sm mt-3">
            <div class="card-body">
                <h4 class="card-title fw-bold" style="color: #3F6C45; margin-bottom: 10px; font-size: 30px;">@fruit.Name</h4>
                <p><strong>Id:</strong> @fruit.Id</p>
                <p><strong>Price:</strong> @fruit.Price.ToString("N0") VNĐ</p>
                <p><strong>Quantity:</strong> @fruit.Quantity</p>
                <p>
                    <strong>Status:</strong>
                    <span class="@(fruit.IsDeleted ? "text-danger" : "text-success")">
                        @(fruit.IsDeleted ? "Deleted" : "Active")
                    </span>
                </p>

                <div class="mt-3 d-flex justify-content-end">
                    <button class="btn btn-success me-2" @onclick="EditFruit">
                        Edit
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Fruits? fruit;

    protected override async Task OnInitializedAsync()
    {
        fruit = await FruitService.GetFruitByIdAsync(Id);
    }

    private void EditFruit()
    {
        Navigation.NavigateTo($"/fruits/edit/{Id}");
    }
}
